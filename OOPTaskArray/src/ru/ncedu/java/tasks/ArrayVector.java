package ru.ncedu.java.tasks;

/**
 * ЦЕЛЬ ЗАДАЧИ - разобраться с массивами и циклами в Java, принципами написания класса,
 *  вызовом статических методов (стандартных классов).
 * 
 * ЗАДАНИЕ
 * Реализовать класс для работы с вектором (набор вещественных чисел, координат) 
 *  и базовые операции векторной арифметики.
 * 
 * ТРЕБОВАНИЯ
 * Экземпляр класса, реализующего данный интерфейс, должен соответствовать одному вектору
 *  и хранить элементы вектора в поле типа "массив".
 * НЕЛЬЗЯ пользоваться классами библиотеки Java, кроме классов Math и Arrays.
 * Среди конструкторов должен быть конструктор без параметров (default constructor).
 * Класс должен работать корректно после вызова такого конструктора и без вызова set-метода.
 * 
 * ПРИМЕЧАНИЕ
 * Задачу можно решать без явной обработки и генерации исключительных ситуаций (Exceptions).
 * 
 * @author Andrey Gavrilov
 * @author Alexander Kharichkin
 * @author Alexey Evdokimov
 */
public interface ArrayVector {
    /**
     * Задает все элементы вектора (определяет длину вектора).
     * Передаваемый массив не клонируется.
     * @param elements Не равен null
     */
    void set(double... elements);
    /**
     * Возвращает все элементы вектора. Массив не клонируется.
     */
    double[] get();
    /**
     * Возвращает копию вектора (такую, изменение элементов 
     *  в которой не приводит к изменению элементов данного вектора).
     */
    ArrayVector clone();
    /**
     * Возвращает число элементов вектора.
     */
    int getSize();

    /**
     * Изменяет элемент по индексу. 
     * @param index В случае выхода индекса за пределы массива:
     *  а) если index<0, ничего не происходит;
     *  б) если index>=0, размер массива увеличивается так, чтобы index стал последним.
     */
    void set(int index, double value);
    /**
     * Возвращает элемент по индексу.
     * @param index В случае выхода индекса за пределы массива 
     *   должно генерироваться ArrayIndexOutOfBoundsException
     */
    double get(int index) throws ArrayIndexOutOfBoundsException;

    /**
     * Возвращает максимальный элемент вектора.
     */
    double getMax();
    /**
     * Возвращает минимальный элемент вектора.
     */
    double getMin();
    /**
     * Сортирует элементы вектора в порядке возрастания.
     */
    void sortAscending();

    /**
     * Умножает вектор на число
     * @param factor
     */
    void mult(double factor);
    /**
     * Складывает вектор с другим вектором, результат запоминает в элементах данного вектора.
     * Если векторы имеют разный размер, последние элементы большего вектора не учитываются.
     * @param anotherVector Не равен null
     * @return Ссылка на себя (результат сложения)
     */
    ArrayVector sum(ArrayVector anotherVector);
    /**
     * Возвращает скалярное произведение двух векторов.
     * Если векторы имеют разный размер, последние элементы большего вектора не учитываются.
     * @param anotherVector Не равен null
     */
    double scalarMult(ArrayVector anotherVector);  
    /**
     * Возвращает евклидову норму вектора (длину вектора 
     *  в n-мерном евклидовом пространстве, n={@link #getSize()}).
     * Квадрат нормы вектора равен скалярному произведению вектора на себя.
     */
    double getNorm();
}